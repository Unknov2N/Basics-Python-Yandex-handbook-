https://otus.ru/journal/chto-dolzhen-znat-razrabotchik-na-python-bez-opyta/
Что изучить? 
Ниже представлен краткий список того, что нужно повторить перед собеседованием:

1. Алгоритмы и структуры данных. Надо их понимать без привязки к конкретному языку программирования. Тут вам и массивы, и связные списки, и множества, и хэш-таблицы, и бинарные деревья поиска, и графы. Могут спросить основные алгоритмы сортировки, способы обхода графов и т. п.
2. Структуры данных в Python. Какие бывают, как применяются, чем различаются, какие есть плюсы и минусы. Строки, списки, множества, кортежи, словари, числовые типы данных… Будет преимуществом умение использовать встроенные в язык программирования структуры данных, к примеру, OrderedDict либо defaultdict из модуля collections.
3. Изменяемые и неизменяемые типы данных. Какая между ними разница, какие неизменяемые и изменяемые типы данных вы знаете. Могут показать задачу и спросить, какую структуру данных вы бы выбрали для решения.
4. Декораторы в Python: что это, как устроено. Иногда просят написать код декоратора. Полезно знать functools.wraps.
5. Контекстные менеджеры: что это, для чего надо. Одно из заданий — реализация контекстного менеджера для работы с файлами по аналогии со встроенным open().
6. Генераторы и итераторы в Python: что это, для чего надо, чем различаются. Можете ли написать генератор четных чисел либо чисел Фибоначчи.
7. GIL: зачем нужен, как работает. Может ли в Python одновременно выполняться более одного потока? Эти знания не то, чтобы обязательны, но выделить кандидата на фоне других они определенно способны.
8. Как устроены популярные фреймворки для «Питона» (Django, Flask). Каковы сильные и слабые стороны. Можете ли вы спроектировать БД для приложения и написать парочку запросов посредством ORM либо SQL.
9. Как функционирует интернет. Требуется понимание моделей OSI/TCP IP, основных протоколов. Знаете ли вы, что происходит, если в поисковой строке вбиваешь, к примеру, otus.ru.
10. Утилиты командной строки. Достаточно рассказать про 5-10 команд, которые вы наиболее часто используете.
11. Потоки, процессы, асинхронное программирование. Какова разница между потоком и процессом, каковы способы межпроцессного взаимодействия вам известны.
12. Логико-математические задачи. Базовые знания математики, комбинаторики и теории вероятности не помешают, как и умение работать с числами в различных системах счисления.
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
https://qna.habr.com/q/177823
Вот список знаний, которыми должен обладать потенциальный Junior Python developer:

Уметь самообучаться, находить нужную информацию.

Иметь общие представления о том, что такое ОС и зачем она появилась.
Понимать что такое процесс и как он “живёт” в ОС.
Понимать что такое поток.
Понимать что такое сокеты и зачем они нужны.
Иметь представление о том, как устроен стек протоколов TCP/IP.

Понимать что такое Linux.
Уметь работать в sh.
Понимать что такое виртуализация и знать какие бывают типы.
Уметь настраивать виртуальные машины через vagrant или подобные инструменты.
Уметь работать с GIT(создавать ветки, разрешать конфликты, etc)

Понимать что такое ООП, на чём он основан и почему им удобно пользоваться.
Понимать что такое императивный и декларативный стиль.
Понимать что такое MVC
Понимать что такое декоратор(стандартный вопрос на собеседовании) и зачем он нужен.
Понимать что такое замыкание.
Понимать что такое интроскпекция.
Понимать асинхронную концепцию программирования.

Уметь работать с БД(хотя бы CRUD, join)
Уметь работать с nginx(хотя бы проксирование настроить)

(можно просто написать - “прочитать Лутца”, но выделю пару вопросов)
Знать чем отличаются new style классы от old style.
Знать чем отличаются Python2 от Python3
Знать чем отличается str от unicode и почему в программе нужно работать с unicode.
Понимать алгоритм импорта модулей в Python.
Понимать что такое генераторы и итераторы.
Понимать что такое дескрипторы.
Понимать что такое GIL и зачем он нужен.
Понимать что такое WSGI и зачем он появился.

+ Уметь писать тесты, понимать зачем это нужно.
+ Практические и теоритические основы по framework.

+ выполнить норматив по ГТО
+ не пить и не курить.

Так же можешь потренироваться по заданиям Юры Юревича. 
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
собеседование универсально https://habr.com/ru/articles/699600/

Например, в случае с Python практически на любом собеседовании спрашивают:
• что такое итераторы и генераторы, и в чём их разница;
• зачем нужны декораторы и как написать хотя бы простенький декоратор;
• что такое аргс и кваргс (*args и **kwargs);
• что такое менеджеры контекста;
• какие типы данных есть в питоне, какие из них изменяемые и неизменяемые.
• что такое метаклассы и магические методы

Существуют и более тонкие вопросы, которые относятся к специфике языка на позиции постарше, например:
• Method Resolution Order;
• PEP;
• Async и корутины;
• Type annotation , GIL и т.д. Принцип вы поняли. 

Во-вторых, это общее знание Computer Science и всяких тем, связанных с программирование в целом, а не с конкретным языком.
Это, например, понимание того:
• что такое ООП и классы;
• наследование, множественное наследование;
• алгоритмы и структуры данных (куда без них).

И чем выше уровень, тем возможно больше требования. Но раз на раз не приходится. Как минимум, про Большое О, список и 1-2 алгоритма сортировки знать стоит.
Так же не будет лишним знать:
• парадигмы программирования;
• основы баз данных, SQL;
• что такое SOLID, DRY, KISS;
• паттерны проектирования и тому подобное.
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
https://tproger.ru/articles/sobesedovanie-vs-realnaja-rabota-kakie-navyki-prigodjatsja-nachinajushhim-python-razrabotchikam/
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
алгоритмы сортировки и поиска, О большое, определения метакласс, ООП, полиморфизм, инкапсуляция и наследование

паттерны MVC vs MVP vs MVVM и шаблоны singletone...
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
https://proglib.io/p/8-tehnologiy-kotorye-dolzhen-znat-kazhdyy-python-razrabotchik-2022-09-23
?? 8 технологий, которые должен знать каждый Python-разработчик

Miroslav Kungurov
Пишу об IT и на Python. kungurov.net
Джентльменский набор пайтон-разработчика, который пригодится вне зависимости от того, куда вы пойдете: в инжиниринг, машинное обучение или бэкенд-разработку.
3

8
?? 8 технологий, которые должен знать каждый Python-разработчик
Статья подготовлена по материалам ютуб-канала luchanos.

Содержание
Git.
Алгоритмы.
Алгоритмы на графах.
Рекурсия.
SQL и базы данных.
Агрегационные функции.
Docker.
Структуры данных.
1. Git
?? 8 технологий, которые должен знать каждый Python-разработчик
Работая в команде над одним проектом, вы наверняка столкнетесь с Git. Git — это система управления версиями, которая помогает отслеживать историю изменений файлов.

Нужно знать:

GIT, удаленный и локальный репозитории.
понятие ветки.
commit, push, pull.
merge request, pull request.
команды merge и rebase.
2. Алгоритмы
?? 8 технологий, которые должен знать каждый Python-разработчик
Следующий момент связан с алгоритмами. На большом количестве данных, задачи, решенные с помощью алгоритмов, будут выполняться быстрее и съедать меньше вычислительных ресурсов по сравнению с заново изобретенным велосипедом.

Нужно знать:

Что такое О-нотация, обозначающая сложность алгоритма, который мы оцениваем.
Что такое алгоритмическая сложность.
Алгоритмы сортировки: пузырьком, слиянием, выборка.
Заучивать алгоритмы не нужно. Поймите концепции сортировки и научитесь оценивать сложность алгоритма — пригодится на собеседовании.

Рекомендую книгу «Грокаем алгоритмы», где простым и доступным языком знакомят с алгоритмами.

3. Алгоритмы на графах
?? 8 технологий, которые должен знать каждый Python-разработчик
Нужно знать:

Поиск в ширину.
Поиск в глубину.
Алгоритм Дейкстры.
Допустим, мы пишем простой файловый менеджер, которой проходит по директориям и смотрит, какие файлы в них расположены. Это пример классического поиска в глубину или в ширину, в зависимости от того, в какую сторону решаем задачу. Или пишем скрипт, удаляющий или создающий файлы по какому-то условию — это как раз классическая задача поиска в глубину. Чтобы не изобретать велосипед, выучите алгоритмы.

Больше полезных материалов вы найдете на нашем телеграм-канале «Библиотека питониста»
Интересно, перейти к каналу
4. Рекурсия
?? 8 технологий, которые должен знать каждый Python-разработчик
Как сказано в книге «Грокаем алгоритмы»: «Любой цикл можно заменить рекурсией и любую рекурсию можно заменить циклом». Цикл и рекурсия — взаимозаменяемые вещи и нужно понимать, что рекурсию сложнее писать и поддерживать, но бывают ситуации, когда цикл писать также сложно и проще написать функцию, которая вызывает саму себя.

Классический пример применения рекурсии – знакомые нам из предыдущего пункта алгоритмы для обхода графов.

Здесь нужно помнить об ошибке предельной глубины рекурсии и затратах памяти.

5. SQL и базы данных
?? 8 технологий, которые должен знать каждый Python-разработчик
Нужно знать:

Реляционную базу данных.
NOSQL.
Вы должны знать простые команды на создание, изменение и удаление таблицы.
Простые выборки по колонкам с условием: select, где вы указываете перечень колонок, из которых вы делаете этот select и пишете условие where.
Когда использовать реляционную БД и NOSQL:

Если задачи решаются с помощью join между таблицами, то здесь лучше использовать только реляционные БД, либо сразу два вида БД на проекте.
Если задачи связаны с частым изменением структур данных — NOSQL.
6. Агрегационные функции
?? 8 технологий, которые должен знать каждый Python-разработчик
Досконально знать их, наверное, не нужно. Достаточно понимать, что такое groupby, count, sum, average и уметь объяснить, как они работают и где они могут пригодиться. Классический пример — посчитать среднее значение в колонке по месяцам. Вы можете использовать агрегационную функцию, сводящую все к одному значению и использовать группировку в рамках месяца.

Следующий момент — join’ы, позволяющие делать стыки таблиц с таблицами, делать оттуда подселекты и получать информацию, которая связывает одну таблицу и другую таблицу, при этом не имея между собой никаких связей через какую-нибудь третью таблицу.

Я не отношу сюда оконные функции, так как это считается высшим пилотажем в SQL. Да и они редко встречаются в моей работе.

7. Docker
?? 8 технологий, которые должен знать каждый Python-разработчик
Нужно знать:

Что такое образ, контейнер.
Сеть докера.
Тома докера.
Написание файлов Docker Compose.
Если вы не будете понимать разницу между докером и контейнером, вы не будете понимать, как это все работает на базовом уровне. Образ поднимает отдельный процесс, который является самим контейнером.

Обращаться к контейнерам, вы, скорее всего, будете с помощью внешних запросов и без понимания того, как настраивается сетка для докеров, вам будет тяжело это сделать: вы будете брать какие-то готовые решения и, кроме номера порта, вы вряд ли сможете что-либо изменить.

О томах: если вы хотите, чтобы после удаления контейнера данные не пропадали из базы, смонтируете место на жестком диске, куда данные будут сохраняться.

8. Структуры данных
?? 8 технологий, которые должен знать каждый Python-разработчик
Нужно знать, что такое:

Массив и множество.
Хеш-таблица.
Стек, дек и очередь.
Связанный список.
Графы.
Это основные структуры данных, с которыми нужно быть знакомыми, чтобы понимать, где, например, быстрее происходит поиск.

Общие моменты
Нужно знать:

Чем отличается интерпретатор от компилятора.
Что такое программа в целом и из чего она состоит: операнды, выражения, блоки выражений и т. д.
Что такое IDE и зачем она нужна. Я рекомендую Jupyter Notebook, PyCharm или VScode
Популярные форматы передачи данных: xml, json и yaml. Вне зависимости от направления, в которое вы пойдете, с ними вы будете сталкиваться постоянно, т. к. практически вся информация по сети гоняется в виде xml и json.
